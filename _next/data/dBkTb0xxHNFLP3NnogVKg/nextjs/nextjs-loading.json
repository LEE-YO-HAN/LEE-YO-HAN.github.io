{"pageProps":{"title":"nextjs loading","description":"nextjs에서의 로딩처리","category":"nextjs","date":"2023-03-04","content":"\r\n# Nextjs에서 로딩처리하기\r\n\r\n### 모든 페이지를 미리 렌더링하는 NextJS 특성상, 다른 페이지로 라우팅이 진행될때, 사용자는 가만히 멈춰있는 화면을 보게될 수 있다. 때문에 페이지 전환을 정지화면으로 두지 않기 위해 로딩 처리를 구현해볼 수 있다.\r\n\r\n## 로딩 스피너 세팅\r\n\r\n```typescript\r\n// _app.tsx\r\n\r\n// 미리 만들어놓은 로딩 훅과 로딩 스피너\r\nimport { useLoading } from \"src/hooks/useLoading\";\r\nimport { LoadingSpinner } from \"src/components/videos/video/LoadingSpinner\";\r\n\r\n<Layout>\r\n  {isLoading ? <LoadingSpinner /> : null}\r\n  <Component {...pageProps} />\r\n</Layout>;\r\n```\r\n\r\n로딩스피너는 CSS로 만들어도 좋고, SVG나 GIF, 라이브러리 등 자유롭게 적용해도 좋다.\r\n\r\n## 라우팅 시 적용될 이벤트 설정\r\n\r\n```typescript\r\n// useLoading.ts\r\n\r\nimport Router from \"next/router\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\nexport const useLoading = () => {\r\n  const [nowLoading, setNowLoading] = useState<boolean>(false);\r\n  useEffect(() => {\r\n    const start = () => {\r\n      setNowLoading(true);\r\n    };\r\n    const end = () => {\r\n      setNowLoading(false);\r\n    };\r\n    Router.events.on(\"routeChangeStart\", start);\r\n    Router.events.on(\"routeChangeComplete\", end);\r\n    Router.events.on(\"routeChangeError\", end);\r\n    return () => {\r\n      Router.events.off(\"routeChangeStart\", start);\r\n      Router.events.off(\"routeChangeComplete\", end);\r\n      Router.events.off(\"routeChangeError\", end);\r\n    };\r\n  }, []);\r\n\r\n  return nowLoading ? true : false;\r\n};\r\n```\r\n\r\n- routeChangeStart(url, { shallow }) - 라우트가 변경되기 시작할때 트리거됨.\r\n\r\n- routeChangeComplete(url, { shallow }) - 라우트가 완전히 변경되었을 때 트리거됨.\r\n\r\n- routeChangeError(err, url, { shallow }) - 라우트 변경 중에 에러가 발생했거나, 취소되었을 때 트리거됨.\r\n\r\n\\_app.tsx(jsx)에 로딩 스피너나 로딩 페이지를 적용해 놓으면,\r\n\r\n라우팅으로 인한 페이지 이동이 일어날 때마다 원하는 로딩 창을 호출해줄 수 있다.\r\n\r\n## 적용된 페이지\r\n\r\n![image](https://blog.kakaocdn.net/dn/cWz72g/btrSmvngm4A/hgKg4FviDpAqQk5U6kGHXK/img.gif)\r\n"},"__N_SSG":true}