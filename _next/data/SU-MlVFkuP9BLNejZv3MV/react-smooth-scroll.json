{"pageProps":{"title":"react smooth scroll","description":"React/Javascript 부드러운 스크롤 이동 적용","category":"react","keyword":"react, smoooth scroll","date":"2023-03-25","content":"\r\n# **부드러운 스크롤 이동 적용 방법**\r\n\r\n> behavior:\"smooth\" 속성을 scroll 이벤트와 scroll 메서드와 같이 사용하며 부드러운 스크롤 이동을 적용해볼 수 있다.\r\n\r\n본 보스팅은 Nextjs 13 환경에서 작성되었다.\r\n\r\n## **scroll() 메서드**\r\n\r\n### **scroll() , scrollTo()**\r\n\r\nscroll(x,y) || scroll(options), scrollTo(x,y) || scrollTo(options) 와 같이 사용할 수 있다.\r\n\r\n사실상 두 메서드는 동일하게 작동한다.\r\n\r\nxy 좌표를 통해서도 사용 가능하며 options를 적용한다면 아래와 같이 사용할 수 있다.\r\n\r\n```javascript\r\nwindow.scroll({\r\n  top: 0,\r\n  left: 0,\r\n  behavior: \"smooth\", // smooth: 부드럽게 전환 , auto: 즉시 이동\r\n});\r\n\r\nwindow.scrollTo({\r\n  top: 0,\r\n  left: 0,\r\n  behavior: \"smooth\", // smooth: 부드럽게 전환 , auto: 즉시 이동\r\n});\r\n```\r\n\r\n### **scrollBy()**\r\n\r\n**scrollBy(x,y) || scrollBy(options)**\r\n\r\nscroll()과 scrollTo()가 특정 좌표로 이동한다면, scrollBy는 길이만큼 스크롤을 이동시킨다.\r\n\r\n옵션과 예제는 아래와 같다.\r\n\r\n```javascript\r\n// 기본 사용\r\nwindow.scrollBy(x, y);\r\n\r\n// 한 페이지 아래\r\nwindow.scrollBy(0, window.innerHeight);\r\n\r\n// 한 페이지 위\r\nwindow.scrollBy(0, -window.innerHeight);\r\n\r\n// 옵션\r\nwindow.scrollBy({\r\n  top: 0,\r\n  left: 0,\r\n  behavior: \"smooth\", // smooth: 부드럽게 전환 , auto: 즉시 이동\r\n});\r\n```\r\n\r\nscroll 메서드가 적용된 화면과 예제코드\r\n\r\n![image](https://blog.kakaocdn.net/dn/bV3l2O/btr5OcgXBcx/ickRekJIOy3VMmRLtzt2pK/img.gif)\r\n\r\n```javascript\r\n// 최상단으로 이동\r\nconst moveScroll = () => {\r\n  scroll({ top: 0, behavior: \"smooth\" });\r\n};\r\n\r\n// 한 페이지 위로 이동\r\nconst moveScrollByUp = () => {\r\n  scrollBy({ top: -window.innerHeight, behavior: \"smooth\" });\r\n};\r\n\r\n// 한 페이지 아래로 이동\r\nconst moveScrollByDown = () => {\r\n  scrollBy({ top: window.innerHeight, behavior: \"smooth\" });\r\n};\r\n\r\n// top 500 위치로 이동\r\nconst moveScrollTo = () => {\r\n  scrollTo({\r\n    top: 500,\r\n    behavior: \"smooth\",\r\n  });\r\n};\r\n\r\n// jsx\r\n<Container>\r\n  <NavBtn>\r\n    <button onClick={moveScroll}>Scroll최상단</button>\r\n    <button onClick={moveScrollByUp}>moveScrollByUp</button>\r\n    <button onClick={moveScrollByDown}>moveScrollByDown</button>\r\n    <button onClick={moveScrollTo}>moveScrollTo</button>\r\n  </NavBtn>\r\n  <TestContainer1 id=\"box1\" />\r\n  <TestContainer2 id=\"box2\" />\r\n  <TestContainer3 id=\"box3\" />\r\n  <TestContainer4 id=\"box4\" />\r\n  <TestContainer5 id=\"box5\" />\r\n  <TestContainer6 id=\"box6\" />\r\n</Container>;\r\n```\r\n\r\n## **Chrome 브라우저에서 behavior:\"smooth\" 속성이 적용되지 않을 때**\r\n\r\n아래와 같이 크롬 버전은 최신이지만, smooth 속성이 적용되지 않는 현상이 나타났다.\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fx3Fal%2Fbtr5ORwXdp3%2FAHsT7DB2D5i76OjhYqcN9k%2Fimg.png)\r\n\r\n![image](https://blog.kakaocdn.net/dn/bourLn/btr5NyrsLbU/nkulo83V1NSn2kEMQb2xYK/img.gif)\r\n\r\n호환성에도 문제가 없지만 MDN의 예제를 실행해 봐도 크롬에선 smooth 속성이 사용되지 않았다.\r\n\r\nMDN 스크롤 예제 : https://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FmJ1Dl%2Fbtr5Nv2OZvD%2Fmk5c6Hks8ai7J4UKhL6wR1%2Fimg.png)\r\n\r\n크롬 브라우저 설정을 따로 해주면 해결된다고는 하지만, 내 PC에서만 작동하는 건 근본적인 해결방법이 아니기 때문에 배제했다.\r\n\r\n참조 : http://www.devdic.com/css/refer/properties/property:1195/scroll-behavior\r\n\r\n### **smoothscroll-polyfill - 적용 실패**\r\n\r\n사용법 : https://www.npmjs.com/package/smoothscroll-polyfill?activeTab=readme\r\n\r\n```typescript\r\n// 패키지 설치\r\n// yarn add smoothscroll-polyfill\r\n\r\n// 최상단 파일\r\n\r\nimport smoothscroll from \"smoothscroll-polyfill\";\r\n\r\nif (typeof window !== \"undefined\") {\r\n  smoothscroll.polyfill();\r\n}\r\n```\r\n\r\n브라우저 호환성 적용을 위한 패키지라고 하는데, 본인에겐 효과가 없었다.\r\n\r\n## **scroll 이벤트를 통한 스크롤 이동 적용**\r\n\r\n스크롤만 이용해서 기능을 적용할 생각이었기에 직접 만들기로 했다.\r\n\r\naddEventListener를 통해 스크롤 이벤트를 감지해 주는 hook을 만들어줬다.\r\n\r\n```typescript\r\n// 스크롤 위 아래 여부 확인\r\nimport { useState, useEffect, useRef } from \"react\";\r\n\r\ninterface MutableRefObject<T> {\r\n  current: T;\r\n}\r\n\r\nexport const useScroll = () => {\r\n  const [scrollCheck, setScrollCheck] = useState(\"\");\r\n  const prevScrollPos: MutableRefObject<number> = useRef(0);\r\n\r\n  useEffect(() => {\r\n    const handleScroll = () => {\r\n      const currentScrollPos = window.pageYOffset; // window객체의 pageYOffset 를 통해 현재 스크롤 위치 저장\r\n      if (currentScrollPos > prevScrollPos.current) {\r\n        // 스크롤 위치에 따른 스크롤 진행 방향 검증\r\n        setScrollCheck(\"DOWN\");\r\n      } else {\r\n        setScrollCheck(\"UP\");\r\n      }\r\n      prevScrollPos.current = currentScrollPos; // 사용된 현재 스크롤 위치를 다음 이벤트 비교대상으로 저장\r\n    };\r\n\r\n    window.addEventListener(\"scroll\", handleScroll); // event 등록\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", handleScroll); // event clear\r\n    };\r\n  }, [prevScrollPos]);\r\n  return {\r\n    scrollCheck, // up/down 여부 return\r\n  };\r\n};\r\n\r\n// hook 사용 컴포넌트\r\nimport { useScroll } from \"@/hooks/useScroll\";\r\nconst { scrollCheck } = useScroll();\r\nuseEffect(() => {\r\n  if (scrollCheck === \"UP\") {\r\n    console.log(\"scroll UP\");\r\n  }\r\n  if (scrollCheck === \"DOWN\") {\r\n    console.log(\"scroll DOWN\");\r\n  }\r\n}, [scrollCheck]);\r\n```\r\n\r\n원하는 값이 잘 나오는 것을 볼 수 있다.\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FF7CNJ%2Fbtr5QzP3p9N%2FErlbv8julxnc1PKZSGRC71%2Fimg.png)\r\n\r\n> 스크롤 이벤트 특성상 한 번 휠을 돌릴 때마다 많은 호출이 일어나기 때문에 필요한 경우에만 사용될 수 있도록 setTimeout 등을 통해 적용하고자 하는 코드에 맞게 함수 실행을 조절해줘야 한다.\r\n\r\n```typescript\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { scrollToSmoothly } from \"@/components/profile/SmoothScroll\";\r\nimport { useScroll } from \"@/hooks/useScroll\";\r\nconst { scrollCheck } = useScroll();\r\nconst scrollRef = useRef({\r\n  // window.innerHeight 값 저장\r\n  height: 0,\r\n});\r\n\r\nconst smoothScrollHandler = () => {\r\n  let maxHeight = window.innerHeight * 6; // 최대 스크롤 길이\r\n  let currentHeight = scrollRef.current.height; // 현재 스크롤 저장\r\n  if (scrollCheck === \"UP\" && currentHeight !== 0) {\r\n    // scroll up이고 맨 위가 아닐 때\r\n    scrollRef.current.height -= window.innerHeight; // useRef에 이동할 height 조정\r\n    scrollToSmoothly(scrollRef.current.height, 500); // 이동할 height까지 500ms동안 이동시킬 함수 (requestAnimationFrame 사용)\r\n  } else if (scrollCheck === \"DOWN\" && currentHeight !== maxHeight) {\r\n    // scroll이 down이고 맨 아래가 아닐 때\r\n    scrollRef.current.height += window.innerHeight; // 상기 동일\r\n    scrollToSmoothly(scrollRef.current.height, 500);\r\n  }\r\n};\r\n\r\nuseEffect(() => {\r\n  smoothScrollHandler();\r\n}, [scrollCheck]); // useScroll()을 통해 구분한 UP/Down이 변경될 때마다 실행\r\n```\r\n\r\n위의 함수를 실행하면 아래와 같이 그나마 정상 작동하는 모습을 볼 수 있다.\r\n\r\n![image](https://blog.kakaocdn.net/dn/cpwxY9/btr5NJNGHOP/34qTHrvGprHknp2jmkpkpK/img.gif)\r\n\r\n## **a 태그를 통한 스크롤 이동**\r\n\r\na 태그의 href 속성을 이용해 간단하게 스크롤을 이동시키는 방법도 있다.\r\n\r\n```javascript\r\n<ProfileContainer>\r\n  <NavBtn>\r\n    <Link href=\"#box1\">1번박스로 이동</Link> // nextjs에서 Link는 a태그의 역할을\r\n    한다.\r\n    <Link href=\"#box2\">2번박스로 이동</Link> // href에 스크롤을 이동시킬 'ID'를 입력하고\r\n    클릭하면\r\n    <Link href=\"#box3\">3번박스로 이동</Link> // 해당 ID요소로 스크롤을\r\n    이동시킨다.\r\n    <Link href=\"#box4\">4번박스로 이동</Link>\r\n    <Link href=\"#box5\">5번박스로 이동</Link>\r\n    <Link href=\"#box6\">6번박스로 이동</Link>\r\n  </NavBtn>\r\n  <TestContainer1 id=\"box1\" />\r\n  <TestContainer2 id=\"box2\" />\r\n  <TestContainer3 id=\"box3\" />\r\n  <TestContainer4 id=\"box4\" />\r\n  <TestContainer5 id=\"box5\" />\r\n  <TestContainer6 id=\"box6\" />\r\n</ProfileContainer>\r\n```\r\n\r\n---\r\n\r\n**참조**\r\n\r\n**scroll 메서드**\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/scroll-behavior\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/Window/scroll\r\n\r\n**requestAnimationFrame**\r\n\r\nhttps://developer.mozilla.org/ko/docs/Web/API/window/requestAnimationFrame\r\n\r\nhttps://developer.mozilla.org/en-US/docs/Web/API/DOMHighResTimeStamp\r\n"},"__N_SSG":true}