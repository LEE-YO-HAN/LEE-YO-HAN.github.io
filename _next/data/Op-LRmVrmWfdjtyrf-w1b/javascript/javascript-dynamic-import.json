{"pageProps":{"title":"javascript dynamic import","description":"Dynamic import를 사용해 동적으로 모듈 가져오기","category":"javascript","date":"2023-03-18","content":"\r\n# Dynamic import란?\r\n\r\n> import() 표현식으로 사용하며, 표현식은 모듈을 읽고 해당 모듈이 내보내는 것들을 모두 포함하는 객체를 담은 이행된 Promise를 반환한다. 호출은 어디서나 가능하다.\r\n\r\n# Dynamic import를 사용하는 이유\r\n\r\n- 기존 import문은 정적인 방식으로, 정적으로 가져오는 경우 코드 로드 속도가 느려지고, 가져오는 코드가 필요할 가능성이 적거나 없을 수 있다.\r\n- 정적으로 가져올 때 프로그램의 메모리 사용량이 크게 증가하고 가져오는 코드가 필요할 가능성이 낮다.\r\n- import문에 동적 매개변수를 사용할 수 없다.\r\n\r\n> 즉, 동적으로 import하는 것은 성능 향상과 필요한 경우에 맞춰 사용하는 것에 용이하다.\r\n\r\n## 사용법\r\n\r\n필요한 함수들을 정의하고, 필요한 곳에서 import하여 원하는 방식대로 적용해준다.\r\n\r\n예시 코드\r\n\r\n```javascript\r\n// someFn.js\r\n\r\nexport const greeting = () => {\r\n  console.log(\"어서오시고\");\r\n};\r\n\r\nexport const importMe = () => {\r\n  console.log(\"다이나믹 임포트를 해주세요\");\r\n};\r\n\r\nexport const easy = () => {\r\n  console.log(\"쉽죠?\");\r\n};\r\n\r\nexport const add = (a, b) => console.log(a + b);\r\n```\r\n\r\n```javascript\r\n// use import()\r\nexport const DynamicImport = () => {\r\n  // async / await 방식\r\n  const loadGreeting = async () => {\r\n    const DI = await import(\"./someFn.js\");\r\n    DI.greeting();\r\n  };\r\n  const loadImportMe = async () => {\r\n    const DI = await import(\"./someFn.js\");\r\n\r\n    DI.importMe();\r\n  };\r\n  const loadEasy = async () => {\r\n    const DI = await import(\"./someFn.js\");\r\n    DI.easy();\r\n  };\r\n\r\n  const loadAddAwait = async (a, b) => {\r\n    const DI = await import(\"./someFn.js\");\r\n    return DI.add(a, b);\r\n  };\r\n  // 기본 방식\r\n  const loadAdd = (a, b) => {\r\n    const DI = import(\"./someFn.js\")\r\n      .then(module => {\r\n        module.add(a, b);\r\n      })\r\n      .catch(err => err);\r\n    return DI;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>DynamicImport component</p>\r\n      <button onClick={loadGreeting}>loadGreeting</button>\r\n      <button onClick={loadImportMe}>loadImportMe</button>\r\n      <button onClick={loadEasy}>loadEasy</button>\r\n      <button onClick={() => loadAdd(1, 2)}>loadAdd</button>\r\n      <button onClick={() => loadAddAwait(5, 5)}>loadAddAwait</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n## Promise를 반환하기 때문에 async/await을 통한 사용도 가능하다.\r\n\r\n위 코드를 통해 생성한 버튼들을 모두 한 번씩 클릭해주면 아래와 같이 사용되는 것을 볼 수 있다.\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FyOVoT%2Fbtr4v801voG%2FmX38iUM5zpLCGKZ5nkyWYK%2Fimg.png)\r\n\r\n> 참고사항 : Dynamic import는 일반 스크립트에서도 동작하기 때문에 script type=\"module\"이 없어도 된다.\r\n\r\n## 주의사항 : import()는 함수 호출과 문법이 유사해 보이지만 함수 호출이 아니다. super()처럼 괄호를 사용하는 특별한 문법 중 하나이다. 따라서 import를 변수에 복사하거나 call/apply 등의 사용은 불가능하다.\r\n\r\n---\r\n\r\n참조\r\n\r\nMDN : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import\r\n\r\nModern js : https://ko.javascript.info/modules-dynamic-imports\r\n"},"__N_SSG":true}