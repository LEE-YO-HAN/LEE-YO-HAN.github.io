{"pageProps":{"title":"redux toolkit 사용해보기","description":"React와 함께 reduxToolkit과 미들웨어인 AsyncThunk를 함께 사용해볼 수 있다.","category":"redux","date":"2023-03-24","content":"\r\n# ReduxToolkit\r\n\r\n리덕스 툴킷은 일반적인 리덕스보다 store 설정을 용이하게 해주고, 추가적인 패키지 설치가 필요하지 않게 설계되었으며, 보일러플레이트(여러 군데에서 반복되는 코드)를 최소화하기 위해 만들어졌다.\r\n\r\n더 사용하기 쉽다는 의미이다. 이번 글에서는 미들웨어인 AsyncThunk와 함께 사용하는 방법을 확인할 수 있다.\r\n\r\n## 1. 설치\r\n\r\n```bash\r\nyarn add @reduxjs/toolkit react-redux\r\n```\r\n\r\n## 2. store 생성\r\n\r\n```javascript\r\n// src/redux/store.js\r\n\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport posts from \"./modules/postSlice\"; // 만들어줄 Slice\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    posts,\r\n  },\r\n});\r\nexport default store;\r\n```\r\n\r\n## 3. 최상위 파일(index.js, App.js 등)에 Provider import해오기\r\n\r\n```javascript\r\n// import -- 기존 코드들 --\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n);\r\n```\r\n\r\n## 4. 슬라이스 생성\r\n\r\n2번의 store에 import 해줄 파일이다.\r\n\r\n```javascript\r\n// postSlice.js\r\n\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:3001\";\r\n\r\nconst initialState = {\r\n  // data, isLoading, error로 상태관리\r\n  posts: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const getPosts = createAsyncThunk(\r\n  \"GET_ALL_Posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      const { data } = await axios.get(`${BASE_URL}/posts`);\r\n      return thunkAPI.fulfillWithValue(data);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const addPosts = createAsyncThunk(\r\n  \"POST_Posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      const { data } = await axios.post(`${BASE_URL}/posts`, payload);\r\n      console.log(\"data\", data);\r\n      return thunkAPI.fulfillWithValue(data);\r\n    } catch (errer) {\r\n      return thunkAPI.rejectWithValue(errer);\r\n    }\r\n  },\r\n);\r\n\r\nexport const updatePosts = createAsyncThunk(\r\n  \"UPDATAE_Posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      console.log(payload);\r\n      const { data } = await axios.put(\r\n        `${BASE_URL}/posts/${payload.id}`,\r\n        payload,\r\n      );\r\n      console.log(\"data\", DataTransfer);\r\n      return thunkAPI.fulfillWithValue(data.data);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const deletePosts = createAsyncThunk(\r\n  \"DELETE_posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      await axios.delete(`${BASE_URL}/posts/${payload}`);\r\n      return thunkAPI.fulfillWithValue(payload);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    /* Pending */\r\n    [getPosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    [addPosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    [deletePosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    /* Fulfilled */\r\n    [getPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      console.log(action);\r\n      state.posts = [...action.payload];\r\n    },\r\n    [addPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.posts.push(action.payload);\r\n    },\r\n    [updatePosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      console.log(action);\r\n      const newState = state.posts.map(item =>\r\n        action.meta.arg.id === item.id\r\n          ? { ...item, content: action.meta.arg.content }\r\n          : item,\r\n      );\r\n      state.posts = newState;\r\n      return state;\r\n    },\r\n    [deletePosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      const newState = state.posts.filter(item => item.id !== action.meta.arg);\r\n      state.posts = newState;\r\n      return state;\r\n    },\r\n    /* Rejected */\r\n    [getPosts.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default postsSlice.reducer;\r\n```\r\n\r\n이 상태에서 Postman을 통해 json 서버를 이용하기 때문에 BASE_URL은 로컬 경로로 설정해줬다.\r\n\r\nextraReducers 의 pending, fulfilled, rejected는 각각 대기중/성공/실패 정도로 생각하면 된다.\r\n\r\n아래와 같이 PostMan을 통해 db.json에 데이터가 정상적으로 확인되면\r\n\r\n포스트맨 사용법 : https://lee-yo-han.github.io/redux/redux와-mock-server-사용하기\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fri6Yi%2FbtrMjiBl1Va%2FlCNsQyz5vPTIhIfBFfpC41%2Fimg.png)\r\n\r\n아래와 같이 Redux hook을 통해 데이터를 자유롭게 사용할 수 있다.\r\n\r\n```javascript\r\nimport { getPosts } from \"../redux/modules/postSlice\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\"; // Redux hooks\r\n\r\nexport default function Home() {\r\n  const data = useSelector(state => state.posts.posts); // postSlice에 있는 전역 State 가져오기\r\n  const dispatch = useDispatch(); //dispatch 사용 준비\r\n\r\n  useEffect(() => {\r\n    dispatch(getPosts()); // dispatch 사용 dispatch(액션함수())\r\n  }, []);\r\n\r\n  console.log(data);\r\n\r\n  return (\r\n    <div>\r\n      <p>redux랑 포스팅CRUD</p>\r\n      <p>데이터를 주세욥</p>\r\n      <ul>\r\n        {data.map(item => (\r\n          <li>\r\n            <span>{item.id}</span>\r\n            <span>{item.nickname}</span>\r\n            <span>{item.content}</span>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n위의 코드에서는 액션 함수의 인자(괄호())가 비어있지만, Slice에 원하는 액션 함수들을 작성한 후 dispatch를 해줄때 데이터가 필요한 경우는 아래의 순서로 데이터가 처리된다고 생각하면 좋다.\r\n\r\n### 데이터 처리 순서\r\n\r\n```javascript\r\n\r\n// jsx component\r\ndispath(액션함수(id등의 데이터))\r\n\r\n// => postSlice 파일 내의 액션 함수\r\nexport const addPosts = createAsyncThunk(\r\n    \"POST_Posts\",\r\n    async (payload, thunkAPI) => { // payload를 통해 데이터를 받고 아래 코드에서 처리할 수 있도록 함\r\n      try {\r\n        const { data } = await axios.post(`${BASE_URL}/posts`, payload);\r\n        console.log(\"data\", data);\r\n        return thunkAPI.fulfillWithValue(data); // 요청 성공 부분\r\n      } catch (errer) {\r\n        return thunkAPI.rejectWithValue(errer);\r\n      }\r\n    }\r\n  );\r\n\r\n// => extraReducers\r\nexport const postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    // ---- 생략 ----\r\n    /* Fulfilled */\r\n    [addPosts.fulfilled]: (state, action) => { // 요청 성공 시, action 인자를 통해 state(전역 상태)를 관리해줄 수 있음 (ex action.payload .---)\r\n      state.isLoading = false;\r\n      state.posts.push(action.payload);\r\n    },\r\n    // ---- 생략 ----\r\n```\r\n\r\n데이터가 정상적으로 화면으로 출력되는 것을 볼 수 있다.\r\n\r\n![image](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FKVbGZ%2FbtrMljZJHmV%2F3XHhLVMqFgXEAjz2HqKky0%2Fimg.png)\r\n\r\n단, useSelector를 사용할 때, (state)=>state... 부분은 데이터에 따라 값의 구조가 다를 수 있기 때문에, console.log()를 통해 데이터를 어떻게 받아오는지 확인하며 코드를 작성해주자.\r\n\r\n## 간단한 CRUD 적용 예시\r\n\r\n![image](https://blog.kakaocdn.net/dn/bDrG2e/btrMjWLhmxB/gsemxzlV7oyCzREe8oHOM1/img.gif)\r\n\r\n## AsyncThunk를 사용한다는 것은\r\n\r\n공식문서 : https://redux-toolkit.js.org/api/createAsyncThunk\r\n\r\n공식 문서에 반환된 Promise를 기반으로 LifeCycle 작업을 전달하는 Thunk 작업 생성자를 반환해 비동기 요청 LifeCycle을 처리하기 위한 표준 권장 접근 방식을 추상화한다는 내용이 있다\r\n\r\n이것은 위의 데이터 처리 순서로 설명한 것과 유사하다.\r\n\r\n```javascript\r\n\r\nexport const addPosts = createAsyncThunk(\r\n    \"POST_Posts\",\r\n    async (payload, thunkAPI) => {\r\n      try {\r\n        const { data } = await axios.post(`${BASE_URL}/posts`, payload);\r\n        console.log(\"data\", data);\r\n        return thunkAPI.fulfillWithValue(data);\r\n      } catch (errer) {\r\n        return thunkAPI.rejectWithValue(errer);\r\n      }\r\n    }\r\n  );\r\n\r\n  ↑↑↑ 이 부분에서 Promise를 반환해주고\r\n\r\n\r\n\r\n\r\n ↓↓↓↓ 이 부분에서 대기/성공/실패 로 구분해 데이터를 처리해준다\r\n\r\n //Panding\r\n //Fulfilled\r\n ...\r\n\r\n [addPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.posts.push(action.payload); // 게시글을 추가했을때 처리해주는 방식\r\n    },\r\n\r\n ...\r\n //Rejected\r\n\r\n```\r\n\r\n# 전체 예제코드\r\n\r\n```javascript\r\n// Home.jsx\r\n\r\nimport {\r\n  deletePosts,\r\n  getPosts,\r\n  updatePosts,\r\n  addPosts,\r\n} from \"../redux/modules/postSlice\";\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nexport default function Home() {\r\n  const [inputValue, setInputValue] = useState();\r\n\r\n  const data = useSelector(state => state.posts.posts);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(getPosts());\r\n  }, []);\r\n  console.log(data);\r\n\r\n  const addButton = () => {\r\n    let addData = {\r\n      nickname: \"한삐\",\r\n      content: inputValue,\r\n    };\r\n    dispatch(addPosts(addData));\r\n  };\r\n\r\n  const deletButton = props => {\r\n    dispatch(deletePosts(props));\r\n  };\r\n\r\n  const editButton = props => {\r\n    let updateData = {\r\n      id: props,\r\n      nickname: \"한삐\",\r\n      content: \"냠냠1231241214\",\r\n    };\r\n    dispatch(updatePosts(updateData));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>redux랑 포스팅CRUD</p>\r\n      <p>데이터를 주세욥</p>\r\n      <input onChange={e => setInputValue(e.target.value)} type=\"text\" />\r\n      <button onClick={addButton}>글쓰기</button>\r\n      <ul>\r\n        {data.map(item => (\r\n          <li key={item.id}>\r\n            <div>\r\n              <span>{item.id}</span>\r\n              <br />\r\n              <span>{item.nickname}</span>\r\n              <br />\r\n              <span>{item.content}</span>\r\n              <br />\r\n            </div>\r\n            <div>\r\n              <button onClick={() => editButton(item.id)}>수정</button>\r\n              <button onClick={() => deletButton(item.id)}>삭제</button>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\n```javascript\r\n// store.js\r\nimport { configureStore } from \"@reduxjs/toolkit\";\r\nimport posts from \"./modules/postSlice\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    posts,\r\n  },\r\n});\r\n\r\nexport default store;\r\n```\r\n\r\n```javascript\r\n// postSlice.js\r\n\r\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { current } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:3001\";\r\n\r\nconst initialState = {\r\n  // data, isLoading, error로 상태관리\r\n  posts: [],\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const getPosts = createAsyncThunk(\r\n  \"GET_ALL_Posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      const { data } = await axios.get(`${BASE_URL}/posts`);\r\n      return thunkAPI.fulfillWithValue(data);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const addPosts = createAsyncThunk(\r\n  \"POST_Posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      const { data } = await axios.post(`${BASE_URL}/posts`, payload);\r\n      console.log(\"data\", data);\r\n      return thunkAPI.fulfillWithValue(data);\r\n    } catch (errer) {\r\n      return thunkAPI.rejectWithValue(errer);\r\n    }\r\n  },\r\n);\r\n\r\nexport const updatePosts = createAsyncThunk(\r\n  \"UPDATAE_Posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      console.log(payload);\r\n      const { data } = await axios.put(\r\n        `${BASE_URL}/posts/${payload.id}`,\r\n        payload,\r\n      );\r\n      console.log(\"data\", DataTransfer);\r\n      return thunkAPI.fulfillWithValue(data.data);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const deletePosts = createAsyncThunk(\r\n  \"DELETE_posts\",\r\n  async (payload, thunkAPI) => {\r\n    try {\r\n      await axios.delete(`${BASE_URL}/posts/${payload}`);\r\n      return thunkAPI.fulfillWithValue(payload);\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error);\r\n    }\r\n  },\r\n);\r\n\r\nexport const postsSlice = createSlice({\r\n  name: \"posts\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    /* Pending */\r\n    [getPosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    [addPosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    [deletePosts.pending]: (state, action) => {\r\n      state.isLoading = true;\r\n    },\r\n    /* Fulfilled */\r\n    [getPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      console.log(action);\r\n      state.posts = [...action.payload];\r\n    },\r\n    [addPosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.posts.push(action.payload);\r\n    },\r\n    [updatePosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      console.log(action);\r\n      const newState = state.posts.map(item =>\r\n        action.meta.arg.id === item.id\r\n          ? { ...item, content: action.meta.arg.content }\r\n          : item,\r\n      );\r\n      state.posts = newState;\r\n      return state;\r\n    },\r\n    [deletePosts.fulfilled]: (state, action) => {\r\n      state.isLoading = false;\r\n      const newState = state.posts.filter(item => item.id !== action.meta.arg);\r\n      state.posts = newState;\r\n      return state;\r\n    },\r\n    /* Rejected */\r\n    [getPosts.rejected]: (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default postsSlice.reducer;\r\n```\r\n"},"__N_SSG":true}