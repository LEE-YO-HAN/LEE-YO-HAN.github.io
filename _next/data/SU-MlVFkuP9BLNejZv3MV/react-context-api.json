{"pageProps":{"title":"react context api","description":"ContextAPI 사용하기","category":"react","keyword":"react, contextAPI","date":"2023-03-15","content":"\r\n# ContextAPI\r\n\r\n> 간단한 데이터의 변화를 props drilling 없이 전역적으로 관리해주기 위해 ContextAPI를 사용해볼 수 있다.\r\n\r\n## 사용법\r\n\r\n## 1. context component 생성\r\n\r\n```javascript\r\n// context.jsx\r\nimport { createContext, useContext, useState } from \"react\";\r\n\r\n// context 생성\r\nconst AnyContextValue = createContext();\r\nconst AnyContextUpdate = createContext();\r\n\r\n// useContext 생성\r\nexport const useContextValue = () => {\r\n  const context = useContext(AnyContextValue);\r\n  return context;\r\n};\r\nexport const useContextUpdate = () => {\r\n  const update = useContext(AnyContextUpdate);\r\n  return update;\r\n};\r\n\r\n// context Component 생성\r\n// children props를 Contextname.provider로 감싸준다.\r\nexport const SomeContext = ({ children }) => {\r\n  const [someData, setSomeData] = useState(\"someData\");\r\n  return (\r\n    <AnyContextValue.Provider value={someData}>\r\n      <AnyContextUpdate.Provider value={setSomeData}>\r\n        {children}\r\n      </AnyContextUpdate.Provider>\r\n    </AnyContextValue.Provider>\r\n  );\r\n};\r\n```\r\n\r\n## 2. context import\r\n\r\n```javascript\r\nimport { TestApp } from \"./components/blogtest/TestApp\";\r\nimport { SomeContext } from \"./components/context/RenderingContext\";\r\n\r\n// import된 Context를 적용하고자 하는 컴포넌트들의 최상위에 감싸준다.\r\nfunction App() {\r\n  return (\r\n    <SomeContext>\r\n      <ChildrenComponent />\r\n    </SomeContext>\r\n  );\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\n## 3. context 사용\r\n\r\n```javascript\r\nimport { useState } from \"react\";\r\n// 생성한 useContext import\r\nimport { useContextUpdate, useContextValue } from \"../context/RenderingContext\";\r\n\r\nexport const ChildrenComponent = () => {\r\n  const values = useContextValue();\r\n  const update = useContextUpdate();\r\n\r\n  const contextHandler = () => {\r\n    values === \"someData\" ? update(\"dataSome\") : update(\"someData\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <p>context value</p>\r\n      <span>value : {values}</span>\r\n      <button onClick={contextHandler}>context 변경 버튼</button>\r\n    </div>\r\n  );\r\n};\r\n```\r\n\r\n위와 같이 설정이 완료된 후 정상적으로 contextAPI를 사용할 수 있다.\r\n\r\n![image](https://blog.kakaocdn.net/dn/d0hnZa/btr35w9FvGX/zDcTOjtXxg23vMKk6LxaM0/img.gif)\r\n\r\n> contextAPI는 간단하게 상태를 관리해줄 수 있지만, provider를 전역으로 감쌌을 때 컴포넌트들이 전반적으로 렌더링이 일어날 수 있기 때문에 상황과 구조에 맞게 적절하게 사용해주는 것이 좋다.\r\n\r\n---\r\n\r\n## 참고 : typescript에서의 contextAPI 사용\r\n\r\n### TypeScript에서는 context 초기값 등의 설정이 필요하다.\r\n\r\n```typescript\r\n// context component\r\n\r\nimport { createContext, useContext, useState } from \"react\";\r\nimport { PostType } from \"@/types/pages\";\r\nimport { ProviderProps, ContextType } from \".\";\r\n\r\n// context 초기화\r\nconst initialContext = {\r\n  posts: [],\r\n  setPosts: () => {},\r\n};\r\n\r\n// context 생성\r\nconst PostContextValue = createContext<PostType[]>(initialContext.posts);\r\nconst PostContextUpdate = createContext<ContextType>(initialContext.setPosts);\r\n\r\n// useContext 생성\r\nexport const useMdContextValue = () => {\r\n  const context = useContext(PostContextValue);\r\n  return context;\r\n};\r\nexport const useMdContextUpdate = () => {\r\n  const update = useContext(PostContextUpdate);\r\n  return update;\r\n};\r\n\r\n// context component 생성\r\nexport const MdContext = ({ children }: ProviderProps) => {\r\n  const [posts, setPosts] = useState<PostType[]>([]);\r\n\r\n  return (\r\n    <PostContextValue.Provider value={posts}>\r\n      <PostContextUpdate.Provider value={setPosts}>\r\n        {children}\r\n      </PostContextUpdate.Provider>\r\n    </PostContextValue.Provider>\r\n  );\r\n};\r\n\r\n// 다른 컴포넌트에서의 사용\r\nimport { useEffect } from \"react\";\r\nimport { useMdContextUpdate } from \"@/context/mdContext\";\r\n\r\nexport default function Home({ posts }: { posts: PostType[] }) {\r\n  const update = useMdContextUpdate();\r\n\r\n  useEffect(() => {\r\n    if (posts) {\r\n      update(posts);\r\n    }\r\n  }, [posts, update]);\r\n```\r\n"},"__N_SSG":true}